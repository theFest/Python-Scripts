""" This script is a basic vulnerability scanner that can be used to identify if a server is vulnerable to known exploits.
In summary, the script uses the socket module to connect to remote hosts and retrieve banner messages, and uses the argparse module to handle command-line arguments.
The banner messages are then compared against a list of exploits stored in a file to determine if the remote host is vulnerable to any of the exploits. """

#!/usr/bin/python
# -*- coding: utf-8 -*-
import socket    # imports the socket module, which provides a low-level core for creating network-related applications in Python.
import os        # imports the os module, which provides a way to interact with the underlying operating system.
import sys       # imports the sys module, which provides access to some variables used or maintained by the Python interpreter and to functions that interact strongly with the interpreter.
import argparse  # imports the argparse module, which makes it easy to write user-friendly command-line interfaces.

# this function establishes a connection to a remote host and returns the banner message sent by the remote host. If a timeout occurs while connecting, the function returns None.
def ret_banner(ip, port):
    try:
        socket.setdefaulttimeout(2)
        s = socket.socket()
        s.connect((ip, port))
        banner = s.recv(1024)
        return banner
    except socket.timeout:
        return None

# this function reads a file containing a list of exploits and checks if the specified banner message is vulnerable to any of the exploits. If the file cannot be opened, an error message is displayed.
def check_vulns(banner, filename):
    try:
        with open(filename, 'r') as exploit_file:
            for line in exploit_file.readlines():
                if line.strip() in banner:
                    print('[+] Server is vulnerable: {}'.format(banner.strip()))
    except IOError as e:
        print('[-] Error opening exploit file: {}'.format(str(e)))

# this is the main function of the script, which sets up the command-line argument parsing using argparse, creates a list of IP addresses and ports to scan, and calls the ret_banner and check_vulns functions for each IP address and port.
def main():
    parser = argparse.ArgumentParser(description='Vulnerability Scanner')
    parser.add_argument('filename', type=str, help='File containing list of exploits')
    args = parser.parse_args()

    filename = args.filename
    port_list = [21, 22, 25, 80, 110, 443]
    ip_list = ['192.168.95.{}'.format(x) for x in range(147, 150)]

    for ip in ip_list:
        for port in port_list:
            banner = ret_banner(ip, port)
            if banner:
                print('[+] {} : {}'.format(ip, banner))
                check_vulns(banner, filename)

# this line specifies that the code inside this block should only be executed if the script is run directly and not imported as a module.
if __name__ == '__main__':
    main()

# run command: python basic_vulnerability_scanner.py your_vulns_list.txt